<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MenuDigital - Painel Administrativo</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #2c3e50;
            --secondary: #e74c3c;
            --accent: #3498db;
            --light: #f8f9fa;
            --dark: #343a40;
            --sidebar-width: 250px;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f5f7f9;
            color: #333;
            overflow-x: hidden;
        }
        
        /* Sidebar */
        #sidebar {
            position: fixed;
            width: var(--sidebar-width);
            height: 100%;
            background-color: var(--primary);
            color: white;
            transition: all 0.3s;
            z-index: 1000;
        }
        
        #sidebar .sidebar-header {
            padding: 20px;
            background-color: var(--dark);
        }
        
        #sidebar ul.components {
            padding: 20px 0;
        }
        
        #sidebar ul li a {
            padding: 15px 20px;
            display: block;
            color: #fff;
            text-decoration: none;
            transition: all 0.3s;
        }
        
        #sidebar ul li a:hover {
            background-color: var(--accent);
        }
        
        #sidebar ul li.active > a {
            background-color: var(--secondary);
        }
        
        #sidebar ul li a i {
            margin-right: 10px;
            width: 20px;
            text-align: center;
        }
        
        /* Content */
        #content {
            width: calc(100% - var(--sidebar-width));
            margin-left: var(--sidebar-width);
            min-height: 100vh;
            transition: all 0.3s;
            padding: 20px;
        }
        
        .navbar {
            background-color: white;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
        }
        
        /* Cards */
        .dashboard-card {
            border-radius: 10px;
            border: none;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
            transition: all 0.3s;
            margin-bottom: 20px;
        }
        
        .dashboard-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.15);
        }
        
        .card-icon {
            font-size: 2.5rem;
            color: var(--secondary);
            margin-bottom: 15px;
        }
        
        /* Tables */
        .table-container {
            background-color: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
            margin-bottom: 20px;
        }
        
        table {
            width: 100%;
        }
        
        table th {
            background-color: var(--light);
            font-weight: 600;
        }
        
        .status-badge {
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
        }
        
        .status-active {
            background-color: #d4edda;
            color: #155724;
        }
        
        .status-inactive {
            background-color: #f8d7da;
            color: #721c24;
        }
        
        .status-pending {
            background-color: #fff3cd;
            color: #856404;
        }
        
        /* Forms */
        .form-container {
            background-color: white;
            border-radius: 10px;
            padding: 25px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
            margin-bottom: 20px;
        }
        
        .form-label {
            font-weight: 600;
            color: var(--dark);
        }
        
        /* Tabs */
        .nav-tabs .nav-link {
            color: var(--dark);
            font-weight: 600;
            border: none;
            padding: 15px 20px;
        }
        
        .nav-tabs .nav-link.active {
            color: var(--secondary);
            border-bottom: 3px solid var(--secondary);
            background: transparent;
        }
        
        /* Charts */
        .chart-container {
            position: relative;
            height: 300px;
            margin-bottom: 20px;
        }
        
        /* Toggle button */
        #sidebarCollapse {
            background-color: var(--secondary);
            border: none;
        }
        
        /* Responsive */
        @media (max-width: 768px) {
            #sidebar {
                margin-left: -var(--sidebar-width);
            }
            
            #sidebar.active {
                margin-left: 0;
            }
            
            #content {
                width: 100%;
                margin-left: 0;
            }
            
            #content.active {
                width: calc(100% - var(--sidebar-width));
                margin-left: var(--sidebar-width);
            }
        }

        .code-container {
            background-color: #2d2d2d;
            color: #f8f8f2;
            border-radius: 5px;
            padding: 15px;
            margin: 20px 0;
            font-family: 'Courier New', monospace;
            overflow-x: auto;
            max-height: 400px;
            overflow-y: auto;
        }

        .code-comment {
            color: #75715e;
        }

        .code-keyword {
            color: #f92672;
        }

        .code-function {
            color: #a6e22e;
        }

        .code-string {
            color: #e6db74;
        }

        .code-number {
            color: #ae81ff;
        }
    </style>
</head>
<body>
    <div class="wrapper">
        <!-- Sidebar -->
        <nav id="sidebar">
            <div class="sidebar-header">
                <h3><i class="fas fa-utensils me-2"></i>MenuDigital</h3>
            </div>

            <ul class="list-unstyled">
                <li class="active">
                    <a href="#"><i class="fas fa-tachometer-alt"></i> Dashboard</a>
                </li>
                <li>
                    <a href="#"><i class="fas fa-users"></i> Assinantes</a>
                </li>
                <li>
                    <a href="#"><i class="fas fa-store"></i> Restaurantes</a>
                </li>
                <li>
                    <a href="#"><i class="fas fa-credit-card"></i> Pagamentos</a>
                </li>
                <li>
                    <a href="#"><i class="fas fa-file-invoice"></i> NFC-e</a>
                </li>
                <li>
                    <a href="#"><i class="fas fa-boxes"></i> Estoque</a>
                </li>
                <li>
                    <a href="#"><i class="fas fa-cog"></i> Configurações</a>
                </li>
                <li>
                    <a href="#"><i class="fas fa-sign-out-alt"></i> Sair</a>
                </li>
            </ul>
        </nav>

        <!-- Page Content -->
        <div id="content">
            <nav class="navbar navbar-expand-lg">
                <div class="container-fluid">
                    <button type="button" id="sidebarCollapse" class="btn btn-primary">
                        <i class="fas fa-bars"></i>
                    </button>
                    
                    <div class="ms-auto d-flex align-items-center">
                        <div class="dropdown">
                            <a href="#" class="dropdown-toggle text-dark" role="button" id="userDropdown" data-bs-toggle="dropdown">
                                <img src="https://ui-avatars.com/api/?name=Admin+User&background=random" class="rounded-circle me-2" width="32" height="32">
                                <span>Admin User</span>
                            </a>
                            <ul class="dropdown-menu dropdown-menu-end">
                                <li><a class="dropdown-item" href="#">Perfil</a></li>
                                <li><a class="dropdown-item" href="#">Configurações</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item" href="#">Sair</a></li>
                            </ul>
                        </div>
                    </div>
                </div>
            </nav>

            <div class="container-fluid">
                <h2 class="mb-4">Lógica de Backend - Sistema de Cardápios Digitais</h2>
                
                <div class="row">
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-header bg-primary text-white">
                                <h5 class="mb-0">Estrutura do Backend</h5>
                            </div>
                            <div class="card-body">
                                <p>O sistema de backend foi desenvolvido em Node.js com Express, utilizando MongoDB como banco de dados. Abaixo estão os principais componentes:</p>
                                
                                <ul class="nav nav-tabs" id="backendTabs" role="tablist">
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link active" id="models-tab" data-bs-toggle="tab" data-bs-target="#models" type="button" role="tab">Modelos</button>
                                    </li>
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link" id="routes-tab" data-bs-toggle="tab" data-bs-target="#routes" type="button" role="tab">Rotas</button>
                                    </li>
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link" id="auth-tab" data-bs-toggle="tab" data-bs-target="#auth" type="button" role="tab">Autenticação</button>
                                    </li>
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link" id="payment-tab" data-bs-toggle="tab" data-bs-target="#payment" type="button" role="tab">Pagamentos</button>
                                    </li>
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link" id="nfe-tab" data-bs-toggle="tab" data-bs-target="#nfe" type="button" role="tab">NFC-e</button>
                                    </li>
                                </ul>
                                
                                <div class="tab-content p-3 bg-light" id="backendTabsContent">
                                    <!-- Models Tab -->
                                    <div class="tab-pane fade show active" id="models" role="tabpanel">
                                        <h5>Modelos de Dados</h5>
                                        <p>Os principais modelos do sistema:</p>
                                        
                                        <div class="code-container">
                                            <pre><code><span class="code-keyword">const</span> mongoose = <span class="code-function">require</span>(<span class="code-string">'mongoose'</span>);

<span class="code-comment">// Modelo de Usuário/Assinante</span>
<span class="code-keyword">const</span> userSchema = <span class="code-keyword">new</span> mongoose.Schema({
  name: { type: String, required: <span class="code-keyword">true</span> },
  email: { type: String, required: <span class="code-keyword">true</span>, unique: <span class="code-keyword">true</span> },
  password: { type: String, required: <span class="code-keyword">true</span> },
  role: { type: String, enum: [<span class="code-string">'admin'</span>, <span class="code-string">'restaurant_owner'</span>], default: <span class="code-string">'restaurant_owner'</span> },
  plan: { type: String, enum: [<span class="code-string">'basic'</span>, <span class="code-string">'professional'</span>, <span class="code-string">'premium'</span>], required: <span class="code-keyword">true</span> },
  status: { type: String, enum: [<span class="code-string">'active'</span>, <span class="code-string">'inactive'</span>, <span class="code-string">'pending'</span>], default: <span class="code-string">'pending'</span> },
  subscriptionDate: { type: Date, default: Date.now },
  paymentMethod: { type: String },
  pagbankSubscriptionId: { type: String }
});

<span class="code-comment">// Modelo de Restaurante</span>
<span class="code-keyword">const</span> restaurantSchema = <span class="code-keyword">new</span> mongoose.Schema({
  name: { type: String, required: <span class="code-keyword">true</span> },
  owner: { type: mongoose.Schema.Types.ObjectId, ref: <span class="code-string">'User'</span>, required: <span class="code-keyword">true</span> },
  address: {
    street: String,
    city: String,
    state: String,
    zipCode: String
  },
  contact: {
    phone: String,
    email: String
  },
  menu: [{ type: mongoose.Schema.Types.ObjectId, ref: <span class="code-string">'MenuItem'</span> }],
  paymentMethods: [{
    type: { type: String, enum: [<span class="code-string">'credit_card'</span>, <span class="code-string">'debit_card'</span>, <span class="code-string">'pix'</span>, <span class="code-string">'cash'</span>] },
    isActive: { type: Boolean, default: <span class="code-keyword">true</span> }
  }],
  pagbankConfig: {
    accessToken: String,
    refreshToken: String,
    publicKey: String
  }
});

<span class="code-comment">// Modelo de Item do Cardápio</span>
<span class="code-keyword">const</span> menuItemSchema = <span class="code-keyword">new</span> mongoose.Schema({
  name: { type: String, required: <span class="code-keyword">true</span> },
  description: String,
  price: { type: Number, required: <span class="code-keyword">true</span> },
  category: { type: String, required: <span class="code-keyword">true</span> },
  image: String,
  isAvailable: { type: Boolean, default: <span class="code-keyword">true</span> },
  stock: {
    current: { type: Number, default: <span class="code-number">0</span> },
    minimum: { type: Number, default: <span class="code-number">0</span> }
  },
  restaurant: { type: mongoose.Schema.Types.ObjectId, ref: <span class="code-string">'Restaurant'</span>, required: <span class="code-keyword">true</span> }
});

<span class="code-comment">// Modelo de Pedido</span>
<span class="code-keyword">const</span> orderSchema = <span class="code-keyword">new</span> mongoose.Schema({
  restaurant: { type: mongoose.Schema.Types.ObjectId, ref: <span class="code-string">'Restaurant'</span>, required: <span class="code-keyword">true</span> },
  customer: {
    name: String,
    phone: String,
    address: {
      street: String,
      city: String,
      state: String,
      zipCode: String
    }
  },
  items: [{
    menuItem: { type: mongoose.Schema.Types.ObjectId, ref: <span class="code-string">'MenuItem'</span> },
    quantity: { type: Number, required: <span class="code-keyword">true</span> },
    price: { type: Number, required: <span class="code-keyword">true</span> }
  }],
  total: { type: Number, required: <span class="code-keyword">true</span> },
  status: { 
    type: String, 
    enum: [<span class="code-string">'pending'</span>, <span class="code-string">'confirmed'</span>, <span class="code-string">'preparing'</span>, <span class="code-string">'delivering'</span>, <span class="code-string">'delivered'</span>, <span class="code-string">'cancelled'</span>], 
    default: <span class="code-string">'pending'</span> 
  },
  paymentMethod: { 
    type: String, 
    enum: [<span class="code-string">'credit_card'</span>, <span class="code-string">'debit_card'</span>, <span class="code-string">'pix'</span>, <span class="code-string">'cash'</span>], 
    required: <span class="code-keyword">true</span> 
  },
  paymentStatus: { 
    type: String, 
    enum: [<span class="code-string">'pending'</span>, <span class="code-string">'paid'</span>, <span class="code-string">'refused'</span>, <span class="code-string">'refunded'</span>], 
    default: <span class="code-string">'pending'</span> 
  },
  nfeId: String,
  createdAt: { type: Date, default: Date.now }
});

<span class="code-comment">// Exportar modelos</span>
module.exports = {
  User: mongoose.model(<span class="code-string">'User'</span>, userSchema),
  Restaurant: mongoose.model(<span class="code-string">'Restaurant'</span>, restaurantSchema),
  MenuItem: mongoose.model(<span class="code-string">'MenuItem'</span>, menuItemSchema),
  Order: mongoose.model(<span class="code-string">'Order'</span>, orderSchema)
};</code></pre>
                                        </div>
                                    </div>
                                    
                                    <!-- Routes Tab -->
                                    <div class="tab-pane fade" id="routes" role="tabpanel">
                                        <h5>Principais Rotas da API</h5>
                                        <p>Estrutura de rotas para o sistema:</p>
                                        
                                        <div class="code-container">
                                            <pre><code><span class="code-keyword">const</span> express = <span class="code-function">require</span>(<span class="code-string">'express'</span>);
<span class="code-keyword">const</span> router = express.Router();
<span class="code-keyword">const</span> auth = <span class="code-function">require</span>(<span class="code-string">'../middleware/auth'</span>);
<span class="code-keyword">const</span> { User, Restaurant, MenuItem, Order } = <span class="code-function">require</span>(<span class="code-string">'../models'</span>);

<span class="code-comment">// Rotas de Autenticação</span>
router.post(<span class="code-string">'/auth/register'</span>, async (req, res) => {
  <span class="code-comment">// Lógica de registro de usuário</span>
});

router.post(<span class="code-string">'/auth/login'</span>, async (req, res) => {
  <span class="code-comment">// Lógica de login</span>
});

<span class="code-comment">// Rotas de Usuários (apenas admin)</span>
router.get(<span class="code-string">'/users'</span>, auth.requireAdmin, async (req, res) => {
  <span class="code-comment">// Listar todos os usuários</span>
});

router.get(<span class="code-string">'/users/:id'</span>, auth.requireAdmin, async (req, res) => {
  <span class="code-comment">// Obter usuário específico</span>
});

<span class="code-comment">// Rotas de Restaurantes</span>
router.get(<span class="code-string">'/restaurants'</span>, auth.verifyToken, async (req, res) => {
  <span class="code-comment">// Listar restaurantes (com filtros por usuário)</span>
});

router.post(<span class="code-string">'/restaurants'</span>, auth.verifyToken, async (req, res) => {
  <span class="code-comment">// Criar novo restaurante</span>
});

<span class="code-comment">// Rotas de Cardápio</span>
router.get(<span class="code-string">'/restaurants/:id/menu'</span>, async (req, res) => {
  <span class="code-comment">// Obter cardápio de um restaurante (público)</span>
});

router.post(<span class="code-string">'/restaurants/:id/menu'</span>, auth.verifyToken, auth.checkRestaurantOwnership, async (req, res) => {
  <span class="code-comment">// Adicionar item ao cardápio</span>
});

<span class="code-comment">// Rotas de Pedidos</span>
router.post(<span class="code-string">'/orders'</span>, async (req, res) => {
  <span class="code-comment">// Criar novo pedido (público)</span>
});

router.get(<span class="code-string">'/restaurants/:id/orders'</span>, auth.verifyToken, auth.checkRestaurantOwnership, async (req, res) => {
  <span class="code-comment">// Listar pedidos de um restaurante</span>
});

<span class="code-comment">// Rotas de Pagamento</span>
router.post(<span class="code-string">'/payment/process'</span>, async (req, res) => {
  <span class="code-comment">// Processar pagamento com PagBank</span>
});

<span class="code-comment">// Rotas de NFC-e</span>
router.post(<span class="code-string">'/orders/:id/nfe'</span>, auth.verifyToken, async (req, res) => {
  <span class="code-comment">// Emitir NFC-e para um pedido</span>
});

module.exports = router;</code></pre>
                                        </div>
                                    </div>
                                    
                                    <!-- Auth Tab -->
                                    <div class="tab-pane fade" id="auth" role="tabpanel">
                                        <h5>Sistema de Autenticação e Autorização</h5>
                                        <p>Middleware para controle de acesso:</p>
                                        
                                        <div class="code-container">
                                            <pre><code><span class="code-keyword">const</span> jwt = <span class="code-function">require</span>(<span class="code-string">'jsonwebtoken'</span>);
<span class="code-keyword">const</span> { User, Restaurant } = <span class="code-function">require</span>(<span class="code-string">'../models'</span>);

<span class="code-comment">// Middleware para verificar token JWT</span>
<span class="code-keyword">const</span> verifyToken = async (req, res, next) => {
  <span class="code-keyword">const</span> token = req.header(<span class="code-string">'Authorization'</span>)?.replace(<span class="code-string">'Bearer '</span>, <span class="code-string">''</span>);
  
  <span class="code-keyword">if</span> (!token) {
    <span class="code-keyword">return</span> res.status(<span class="code-number">401</span>).json({ message: <span class="code-string">'Acesso negado. Token não fornecido.'</span> });
  }

  <span class="code-keyword">try</span> {
    <span class="code-keyword">const</span> decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = await User.findById(decoded.id).select(<span class="code-string">'-password'</span>);
    next();
  } <span class="code-keyword">catch</span> (error) {
    res.status(<span class="code-number">400</span>).json({ message: <span class="code-string">'Token inválido.'</span> });
  }
};

<span class="code-comment">// Middleware para exigir perfil de administrador</span>
<span class="code-keyword">const</span> requireAdmin = async (req, res, next) => {
  <span class="code-keyword">if</span> (req.user.role !== <span class="code-string">'admin'</span>) {
    <span class="code-keyword">return</span> res.status(<span class="code-number">403</span>).json({ message: <span class="code-string">'Acesso restrito a administradores.'</span> });
  }
  next();
};

<span class="code-comment">// Middleware para verificar propriedade do restaurante</span>
<span class="code-keyword">const</span> checkRestaurantOwnership = async (req, res, next) => {
  <span class="code-keyword">try</span> {
    <span class="code-keyword">const</span> restaurant = await Restaurant.findById(req.params.id);
    
    <span class="code-keyword">if</span> (!restaurant) {
      <span class="code-keyword">return</span> res.status(<span class="code-number">404</span>).json({ message: <span class="code-string">'Restaurante não encontrado.'</span> });
    }
    
    <span class="code-keyword">if</span> (restaurant.owner.toString() !== req.user._id.toString() && req.user.role !== <span class="code-string">'admin'</span>) {
      <span class="code-keyword">return</span> res.status(<span class="code-number">403</span>).json({ message: <span class="code-string">'Acesso não autorizado a este restaurante.'</span> });
    }
    
    req.restaurant = restaurant;
    next();
  } <span class="code-keyword">catch</span> (error) {
    res.status(<span class="code-number">500</span>).json({ message: <span class="code-string">'Erro ao verificar propriedade do restaurante.'</span> });
  }
};

<span class="code-comment">// Middleware para verificar se o usuário tem um plano ativo</span>
<span class="code-keyword">const</span> checkActiveSubscription = async (req, res, next) => {
  <span class="code-keyword">if</span> (req.user.status !== <span class="code-string">'active'</span> && req.user.role !== <span class="code-string">'admin'</span>) {
    <span class="code-keyword">return</span> res.status(<span class="code-number">403</span>).json({ message: <span class="code-string">'Sua assinatura não está ativa.'</span> });
  }
  next();
};

module.exports = {
  verifyToken,
  requireAdmin,
  checkRestaurantOwnership,
  checkActiveSubscription
};</code></pre>
                                        </div>
                                    </div>
                                    
                                    <!-- Payment Tab -->
                                    <div class="tab-pane fade" id="payment" role="tabpanel">
                                        <h5>Integração com PagBank</h5>
                                        <p>Lógica para processamento de pagamentos:</p>
                                        
                                        <div class="code-container">
                                            <pre><code><span class="code-keyword">const</span> axios = <span class="code-function">require</span>(<span class="code-string">'axios'</span>);
<span class="code-keyword">const</span> { Order, Restaurant } = <span class="code-function">require</span>(<span class="code-string">'../models'</span>);

<span class="code-comment">// Configuração da API do PagBank</span>
<span class="code-keyword">const</span> PAGBANK_API_URL = process.env.PAGBANK_API_URL;
<span class="code-keyword">const</span> PAGBANK_ACCESS_TOKEN = process.env.PAGBANK_ACCESS_TOKEN;

<span class="code-comment">// Cliente para API do PagBank</span>
<span class="code-keyword">const</span> pagbankClient = axios.create({
  baseURL: PAGBANK_API_URL,
  headers: {
    <span class="code-string">'Authorization'</span>: `Bearer ${PAGBANK_ACCESS_TOKEN}`,
    <span class="code-string">'Content-Type'</span>: <span class="code-string">'application/json'</span>
  }
});

<span class="code-comment">// Processar pagamento com cartão de crédito</span>
<span class="code-keyword">const</span> processCreditCardPayment = async (orderData, cardData) => {
  <span class="code-keyword">try</span> {
    <span class="code-keyword">const</span> payload = {
      reference_id: orderData._id.toString(),
      customer: {
        name: orderData.customer.name,
        email: orderData.customer.email,
        tax_id: orderData.customer.taxId,
        phones: [{ number: orderData.customer.phone, type: <span class="code-string">'MOBILE'</span> }]
      },
      items: orderData.items.map(item => ({
        name: item.name,
        quantity: item.quantity,
        unit_amount: Math.round(item.price * <span class="code-number">100</span>) <span class="code-comment">// Convertendo para centavos</span>
      })),
      shipping: {
        address: {
          street: orderData.customer.address.street,
          number: orderData.customer.address.number,
          complement: orderData.customer.address.complement,
          city: orderData.customer.address.city,
          state: orderData.customer.address.state,
          country: <span class="code-string">'BRA'</span>,
          postal_code: orderData.customer.address.zipCode
        }
      },
      charges: [{
        reference_id: orderData._id.toString(),
        description: `Pedido #${orderData._id.toString()}`,
        amount: {
          value: Math.round(orderData.total * <span class="code-number">100</span>), <span class="code-comment">// Convertendo para centavos</span>
          currency: <span class="code-string">'BRL'</span>
        },
        payment_method: {
          type: <span class="code-string">'CREDIT_CARD'</span>,
          installments: cardData.installments || <span class="code-number">1</span>,
          capture: <span class="code-keyword">true</span>,
          card: {
            number: cardData.number,
            exp_month: cardData.expMonth,
            exp_year: cardData.expYear,
            security_code: cardData.securityCode,
            holder: {
              name: cardData.holderName
            }
          }
        }
      }]
    };

    <span class="code-keyword">const</span> response = await pagbankClient.post(<span class="code-string">'/orders'</span>, payload);
    
    <span class="code-keyword">return</span> {
      success: <span class="code-keyword">true</span>,
      data: response.data
    };
  } <span class="code-keyword">catch</span> (error) {
    console.error(<span class="code-string">'Erro ao processar pagamento com cartão:'</span>, error.response?.data || error.message);
    <span class="code-keyword">return</span> {
      success: <span class="code-keyword">false</span>,
      error: error.response?.data || error.message
    };
  }
};

<span class="code-comment">// Processar pagamento com PIX</span>
<span class="code-keyword">const</span> processPixPayment = async (orderData) => {
  <span class="code-keyword">try</span> {
    <span class="code-keyword">const</span> payload = {
      reference_id: orderData._id.toString(),
      customer: {
        name: orderData.customer.name,
        email: orderData.customer.email,
        tax_id: orderData.customer.taxId,
        phones: [{ number: orderData.customer.phone, type: <span class="code-string">'MOBILE'</span> }]
      },
      items: orderData.items.map(item => ({
        name: item.name,
        quantity: item.quantity,
        unit_amount: Math.round(item.price * <span class="code-number">100</span>) <span class="code-comment">// Convertendo para centavos</span>
      })),
      shipping: {
        address: {
          street: orderData.customer.address.street,
          number: orderData.customer.address.number,
          complement: orderData.customer.address.complement,
          city: orderData.customer.address.city,
          state: orderData.customer.address.state,
          country: <span class="code-string">'BRA'</span>,
          postal_code: orderData.customer.address.zipCode
        }
      },
      charges: [{
        reference_id: orderData._id.toString(),
        description: `Pedido #${orderData._id.toString()}`,
        amount: {
          value: Math.round(orderData.total * <span class="code-number">100</span>), <span class="code-comment">// Convertendo para centavos</span>
          currency: <span class="code-string">'BRL'</span>
        },
        payment_method: {
          type: <span class="code-string">'PIX'</span>,
          expires_in: <span class="code-number">1800</span> <span class="code-comment">// 30 minutos</span>
        }
      }]
    };

    <span class="code-keyword">const</span> response = await pagbankClient.post(<span class="code-string">'/orders'</span>, payload);
    
    <span class="code-keyword">return</span> {
      success: <span class="code-keyword">true</span>,
      data: response.data
    };
  } <span class="code-keyword">catch</span> (error) {
    console.error(<span class="code-string">'Erro ao processar pagamento com PIX:'</span>, error.response?.data || error.message);
    <span class="code-keyword">return</span> {
      success: <span class="code-keyword">false</span>,
      error: error.response?.data || error.message
    };
  }
};

<span class="code-comment">// Webhook para receber notificações do PagBank</span>
<span class="code-keyword">const</span> handleWebhook = async (webhookData) => {
  <span class="code-keyword">try</span> {
    <span class="code-keyword">const</span> { event, resource } = webhookData;
    
    <span class="code-keyword">if</span> (event === <span class="code-string">'PAYMENT_CONFIRMED'</span> || event === <span class="code-string">'PAYMENT_AUTHORIZED'</span>) {
      <span class="code-comment">// Atualizar status do pedido para pago</span>
      await Order.findByIdAndUpdate(resource.reference_id, {
        paymentStatus: <span class="code-string">'paid'</span>,
        status: <span class="code-string">'confirmed'</span>
      });
    } <span class="code-keyword">else</span> <span class="code-keyword">if</span> (event === <span class="code-string">'PAYMENT_REFUSED'</span> || event === <span class="code-string">'PAYMENT_CANCELLED'</span>) {
      <span class="code-comment">// Atualizar status do pedido para recusado</span>
      await Order.findByIdAndUpdate(resource.reference_id, {
        paymentStatus: <span class="code-string">'refused'</span>,
        status: <span class="code-string">'cancelled'</span>
      });
    }
    
    <span class="code-keyword">return</span> { success: <span class="code-keyword">true</span> };
  } <span class="code-keyword">catch</span> (error) {
    console.error(<span class="code-string">'Erro ao processar webhook:'</span>, error);
    <span class="code-keyword">return</span> { success: <span class="code-keyword">false</span>, error: error.message };
  }
};

module.exports = {
  processCreditCardPayment,
  processPixPayment,
  handleWebhook
};</code></pre>
                                        </div>
                                    </div>
                                    
                                    <!-- NFE Tab -->
                                    <div class="tab-pane fade" id="nfe" role="tabpanel">
                                        <h5>Emissão de NFC-e</h5>
                                        <p>Integração com API nacional de NFC-e:</p>
                                        
                                        <div class="code-container">
                                            <pre><code><span class="code-keyword">const</span> axios = <span class="code-function">require</span>(<span class="code-string">'axios'</span>);
<span class="code-keyword">const</span> { Order, Restaurant } = <span class="code-function">require</span>(<span class="code-string">'../models'</span>);

<span class="code-comment">// Configuração da API de NFC-e</span>
<span class="code-keyword">const</span> NFE_API_URL = process.env.NFE_API_URL;
<span class="code-keyword">const</span> NFE_TOKEN = process.env.NFE_TOKEN;

<span class="code-comment">// Cliente para API de NFC-e</span>
<span class="code-keyword">const</span> nfeClient = axios.create({
  baseURL: NFE_API_URL,
  headers: {
    <span class="code-string">'Authorization'</span>: `Bearer ${NFE_TOKEN}`,
    <span class="code-string">'Content-Type'</span>: <span class="code-string">'application/json'</span>
  }
});

<span class="code-comment">// Emitir NFC-e para um pedido</span>
<span class="code-keyword">const</span> emitNfe = async (orderId) => {
  <span class="code-keyword">try</span> {
    <span class="code-keyword">const</span> order = await Order.findById(orderId).populate(<span class="code-string">'restaurant'</span>);
    
    <span class="code-keyword">if</span> (!order) {
      <span class="code-keyword">return</span> { success: <span class="code-keyword">false</span>, error: <span class="code-string">'Pedido não encontrado.'</span> };
    }
    
    <span class="code-keyword">if</span> (order.paymentStatus !== <span class="code-string">'paid'</span>) {
      <span class="code-keyword">return</span> { success: <span class="code-keyword">false</span>, error: <span class="code-string">'Pedido não está pago.'</span> };
    }
    
    <span class="code-keyword">const</span> restaurant = order.restaurant;
    
    <span class="code-comment">// Preparar dados para emissão da NFC-e</span>
    <span class="code-keyword">const</span> nfeData = {
      ambiente: process.env.NFE_ENV || <span class="code-number">2</span>, <span class="code-comment">// 1=Produção, 2=Homologação</span>
      natureza_operacao: <span class="code-string">'Venda'</span>,
      tipo_documento: <span class="code-number">1</span>, <span class="code-comment">// 1=Saída</span>
      finalidade_emissao: <span class="code-number">1</span>, <span class="code-comment">// 1=Normal</span>
      consumidor_final: <span class="code-number">1</span>, <span class="code-comment">// 1=Sim</span>
      presenca_comprador: <span class="code-number">1</span>, <span class="code-comment">// 1=Operação presencial</span>
      data_emissao: <span class="code-keyword">new</span> Date().toISOString(),
      data_entrada_saida: <span class="code-keyword">new</span> Date().toISOString(),
      emitente: {
        nome: restaurant.name,
        razao_social: restaurant.legalName || restaurant.name,
        cnpj: restaurant.cnpj,
        ie: restaurant.ie,
        im: restaurant.im,
        cnae: restaurant.cnae,
        regime_tributario: restaurant.taxRegime || <span class="code-number">1</span>, <span class="code-comment">// 1=Simples Nacional</span>
        endereco: {
          logradouro: restaurant.address.street,
          numero: restaurant.address.number,
          complemento: restaurant.address.complement,
          bairro: restaurant.address.district,
          cep: restaurant.address.zipCode,
          municipio: restaurant.address.city,
          uf: restaurant.address.state,
          pais: <span class="code-string">'BR'</span>
        }
      },
      destinatario: {
        nome: order.customer.name,
        tipo_documento: <span class="code-string">'CPF'</span>,
        numero_documento: order.customer.cpf || <span class="code-string">'00000000000'</span>,
        email: order.customer.email,
        endereco: {
          logradouro: order.customer.address.street,
          numero: order.customer.address.number,
          complemento: order.customer.address.complement,
          bairro: order.customer.address.district,
          cep: order.customer.address.zipCode,
          municipio: order.customer.address.city,
          uf: order.customer.address.state,
          pais: <span class="code-string">'BR'</span>
        }
      },
      items: order.items.map((item, index) => ({
        numero_item: index + <span class="code-number">1</span>,
        codigo_produto: item.menuItem._id.toString(),
        descricao: item.menuItem.name,
        cfop: <span class="code-string">'5102'</span>,
        unidade_comercial: <span class="code-string">'UN'</span>,
        quantidade_comercial: item.quantity,
        valor_unitario_comercial: item.price,
        valor_unitario_tributavel: item.price,
        unidade_tributavel: <span class="code-string">'UN'</span>,
        quantidade_tributavel: item.quantity,
        valor_bruto: item.price * item.quantity,
        icms_origem: <span class="code-number">0</span>,
        icms_situacao_tributaria: <span class="code-string">'102'</span>,
        pis_situacao_tributaria: <span class="code-string">'07'</span>,
        cofins_situacao_tributaria: <span class="code-string">'07'</span>
      })),
      valor_total: order.total,
      informacoes_adicionais: `Pedido: ${order._id.toString()}`
    };

    <span class="code-comment">// Enviar requisição para API de NFC-e</span>
    <span class="code-keyword">const</span> response = await nfeClient.post(<span class="code-string">'/nfe/emissao'</span>, nfeData);
    
    <span class="code-comment">// Atualizar pedido com ID da NFC-e</span>
    order.nfeId = response.data.id;
    order.nfeStatus = response.data.status;
    order.nfeProtocol = response.data.protocol;
    order.nfeKey = response.data.key;
    await order.save();
    
    <span class="code-keyword">return</span> {
      success: <span class="code-keyword">true</span>,
      data: response.data
    };
  } <span class="code-keyword">catch</span> (error) {
    console.error(<span class="code-string">'Erro ao emitir NFC-e:'</span>, error.response?.data || error.message);
    <span class="code-keyword">return</span> {
      success: <span class="code-keyword">false</span>,
      error: error.response?.data || error.message
    };
  }
};

<span class="code-comment">// Consultar status de uma NFC-e</span>
<span class="code-keyword">const</span> checkNfeStatus = async (nfeId) => {
  <span class="code-keyword">try</span> {
    <span class="code-keyword">const</span> response = await nfeClient.get(`/nfe/consulta/${nfeId}`);
    <span class="code-keyword">return</span> { success: <span class="code-keyword">true</span>, data: response.data };
  } <span class="code-keyword">catch</span> (error) {
    console.error(<span class="code-string">'Erro ao consultar NFC-e:'</span>, error.response?.data || error.message);
    <span class="code-keyword">return</span> { success: <span class="code-keyword">false</span>, error: error.response?.data || error.message };
  }
};

module.exports = {
  emitNfe,
  checkNfeStatus
};</code></pre>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Sidebar toggle
            document.getElementById('sidebarCollapse').addEventListener('click', function() {
                document.getElementById('sidebar').classList.toggle('active');
                document.getElementById('content').classList.toggle('active');
            });
            
            // Tab functionality
            const triggerTabList = document.querySelectorAll('#backendTabs button');
            triggerTabList.forEach(triggerEl => {
                triggerEl.addEventListener('click', event => {
                    event.preventDefault();
                    const tab = new bootstrap.Tab(triggerEl);
                    tab.show();
                });
            });
        });
    </script>
</body>
</html>
